//Script GUID:51c5da8c-ece9-4ee6-9327-0f54da9b4144
//Used for tracking history


// NGP Tagging Module
#DECLARE PrivacyAnnotationPath string = "/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module";
MODULE @PrivacyAnnotationPath;

MODULE @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/CSV/AppsCommonScriptUtilsModule.module"; 

REFERENCE "/shares/asimov.prod.data/Public/Resources/Latest/Microsoft.Telemetry.Cosmos.Application.dll";
REFERENCE "/shares/asimov.prod.data/Public/Resources/Latest/Device/Microsoft.Telemetry.Common.Utilities.dll";

USING Microsoft.Telemetry.Cosmos.Application;
USING Microsoft.Telemetry.Common.Utilities;

MODULE "/shares/asimov.prod.data/Public/Resources/Latest/Dimensions/CommonDimensions.module" AS CommonDimensions;

// --------------------------------------------------------------------------------------------------------------------

// Date Parameters
#DECLARE timePeriodDays int = 180;
#DECLARE endDate DateTime = IF("@@endDate@@".StartsWith("@@"), DateTime.UtcNow.AddDays(-3), DateTime.Parse("@@endDate@@"));
#DECLARE startDate DateTime = @endDate.AddDays( - (@timePeriodDays - 1));
#DECLARE endDateString string = @endDate.ToString("yyyy-MM-dd");
#DECLARE startDateString string = @startDate.ToString("yyyy-MM-dd");

// Normalization Parameters 
#DECLARE normalizedMinRange int = IF("@@normalizedMinRange@@".StartsWith("@@"), 0, int.Parse("@@normalizedMinRange@@"));
#DECLARE normalizedMaxRange int = IF("@@normalizedMaxRange@@".StartsWith("@@"), 10000, int.Parse("@@normalizedMaxRange@@"));

// --------------------------------------------------------------------------------------------------------------------
#DECLARE streamExpiryString string = "30";
// --------------------------------------------------------------------------------------------------------------------
#DECLARE inputRoot string = @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Search/RelevanceScore/";

// Input Streams and Views
#DECLARE dimAppView string = @"/shares/asimov.prod.data/Public/Processed/Common/Dimensions/DimApp/DimApp.view"; 
#DECLARE dimAppViewVersion string = "V9";

#DECLARE dimVideoProductsStream string = string.Format("{0}/{1:yyyy}/{1:MM}/DimVideoFinal_{1:yyyy}_{1:MM}_{1:dd}.ss", @inputRoot.TrimEnd(new[]{ '/' }), @endDate);

// Streams and Views
RatingsStream = SSTREAM @"/shares/asimov.prod.data/PublicPartner/Processed/DSXRatings/prod/cooked/dataForPartners/V2/RatingsSummaryWithDeviceFamily/All/RatingsSummaryWithDeviceFamily.ss";
#DECLARE inputStream string = @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Search/RelevanceScore/2022/11/AggregatedScoreFraud_2022_11_26.ss";
#DECLARE inputStream2 string = @"/users/vijeetthomas/Search/RelevanceScore/2022/12/AggregatedScoreFraud_2022_12_15.ss";
#DECLARE nameStream string = @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Store/Catalog/DimSfaProduct.ss";
RatingsStream2 = SSTREAM @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Search/RelevanceScore/AndroidRatings/2022/11/AndroidRatings_2022_11_23.ss";
// --------------------------------------------------------------------------------------------------------------------


Ratings =
    SELECT *.Except(RatingsCount),
           RatingsCount AS RatingCount
    FROM RatingsStream2
    WHERE !string.IsNullOrWhiteSpace(ProductId)
//          AND !string.IsNullOrWhiteSpace(Market)
//          AND (!string.IsNullOrEmpty(DeviceFamily) && DeviceFamily.ToLowerInvariant() == "all")
          //AND Market=="US"
;

//dimVideoProductsUpdated = 
//    SELECT *
//    FROM 
//        (
//            SSTREAM @dimVideoProductsStream
//        )
//;
//
//dimVideoProducts = 
//    SELECT ProductId,
//           ProductGroupName,
//           ProductTypeName
//    FROM dimVideoProductsUpdated
//    GROUP BY ProductId,
//             ProductGroupName,
//             ProductTypeName
//    WHERE (ProductTypeName.Equals("TV Series") || ProductTypeName.Equals("Movie")) 
//    ;

filteredStream =
    SELECT ProductId, 
           // ProductName
           Market,
           AggregateScore AS OldAggregateScore
    FROM
    (
        SSTREAM @inputStream
    );

filteredStream2 =
    SELECT ProductId, 
           // ProductName
           Market,
           AggregateScore AS NewAggregateScore
    FROM
    (
        SSTREAM @inputStream2
    );

filteredRatings =
    SELECT //f.ProductName,
            r.*,
            f.OldAggregateScore,
            f2.NewAggregateScore
    FROM filteredStream AS f
    INNER JOIN
        Ratings AS r
        ON r.ProductId == f.ProductId AND r.Market == f.Market
    INNER JOIN
    filteredStream2 AS f2
    ON f2.ProductId == f.ProductId AND f2.Market == f.Market
        ;

RatingsMinMax = 
    SELECT MAX(RatingCount) AS MaxRatingCount, 
           MIN(RatingCount) AS MinRatingCount,
           AVG(RatingCount) AS AvgRatingCount
           FROM  filteredRatings;

videosSummary =
    SELECT *,
           (RatingCount == 0? 1 : 0) AS RatingCountZero,
           (RatingCount <= 10 && RatingCount > 5 ? 1 : 0) AS RatingCountLessThan10,
           (RatingCount <= 20 && RatingCount > 10 ? 1 : 0) AS RatingCountLessThan20,
           (RatingCount <= 50 && RatingCount > 40? 1 : 0) AS RatingCountLessThan50,
           (RatingCount <= 100 && RatingCount > 50? 1 : 0) AS RatingCountLessThan100,
           (RatingCount <= 500 && RatingCount > 100? 1 : 0) AS RatingCountLessThan500,
           (RatingCount <= 1000 && RatingCount > 500? 1 : 0) AS RatingCountLessThan1000,
           (RatingCount <= 2000 && RatingCount > 1000? 1 : 0) AS RatingCountLessThan2000,
           (RatingCount <= 5000 && RatingCount > 2000? 1 : 0) AS RatingCountLessThan5000,
           (RatingCount <= 10000 && RatingCount > 5000? 1 : 0) AS RatingCountLessThan10000,
           (RatingCount > 1000? 1 : 0) AS RatingCountGreaterThan10000
    FROM Ratings;

videosSummary = 
    SELECT SUM(RatingCountZero) AS RatingCountZero,
           SUM(RatingCountLessThan10) AS RatingCountLessThan10,
           SUM(RatingCountLessThan20) AS RatingCountLessThan20,
           SUM(RatingCountLessThan50) AS RatingCountLessThan50,
           SUM(RatingCountLessThan100) AS RatingCountLessThan100,
           SUM(RatingCountLessThan500) AS RatingCountLessThan500,
           SUM(RatingCountLessThan1000) AS RatingCountLessThan1000,
           SUM(RatingCountLessThan2000) AS RatingCountLessThan2000,
           SUM(RatingCountLessThan5000) AS RatingCountLessThan5000,
           SUM(RatingCountLessThan10000) AS RatingCountLessThan10000,
           SUM(RatingCountGreaterThan10000) AS RatingCountGreaterThan10000,
           MaxRatingCount,
           MinRatingCount,
           AvgRatingCount
    FROM videosSummary CROSS JOIN RatingsMinMax;

OUTPUT videosSummary TO SSTREAM @"/users/vijeetthomas/search/Analysis/AndroidRatingsAnalysis.ss";

Names =
    SELECT ProductId, ProductName
    FROM (SSTREAM @nameStream)
    WHERE !string.IsNullOrWhiteSpace(ProductId);

productStream = SELECT DISTINCT f.*,n.ProductName FROM filteredRatings AS f LEFT JOIN Names AS n ON f.ProductId == n.ProductId;

OUTPUT productStream TO SSTREAM @"/users/vijeetthomas/search/Analysis/AndroidRatingsProducts.ss"
CLUSTERED BY ProductId, Market
SORTED BY RatingCount DESC;
/*
    LEFT JOIN modernAppAndGameProducts AS a
        ON p.ProductId == a.ProductId
    
    LEFT JOIN dimVideoProducts AS v 
        ON p.ProductId == v.ProductId
        
    LEFT JOIN dimWin32Apps AS w 
        ON p.ProductId == w.ProductId
*/