//Script GUID:4832b3b6-9bea-4bcc-8b4b-867676e25edd
//Used for tracking history

// Schema Mapping

// Output Schema           Input JSON                      Type or Example Object
// -------------           ----------                      ----------------------
// ProductId:              id                              string
// Catalog:                catalog                         string
// PartnerProductId:       partnerProductId                string
//                         summaries                       [{"markets": ["US"], "rating": {"starsCount": [2076, 8068, 5939, 7170, 1914], "average": 1.5498676847433055, "type": "star"}]
// Market                  summaries.markets[0]            string
// OneStarRatings          summaries.rating.starsCount[0]  long
// TwoStarRatings          summaries.rating.starsCount[1]  long
// ThreeStarRatings        summaries.rating.starsCount[2]  long
// FourStarRatings         summaries.rating.starsCount[3]  long
// FiveStarRatings         summaries.rating.starsCount[4]  long
// RatingsSum              derived from summaries.rating   long
// RatingsCount            derived from summaries.rating   long
// RatingsAverage          summaries.rating.average        double

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Nebula parameters
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
SET @@FeaturePreviews = "EnableJsonOperators:on,EnableJsonIntrinsics:on";
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// References
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Store/Catalog/Libraries/netstandard.dll";
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ACE/Store/Catalog/Libraries/Newtonsoft.Json.dll";

USING Newtonsoft.Json;
USING Newtonsoft.Json.Converters;
USING Newtonsoft.Json.Linq;

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Parameters
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
#DECLARE endDate DateTime = IF("@@endDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@endDate@@"));
#DECLARE streamExpiry string = "180";

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Input
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//#DECLARE androidRnRJson string = "/shares/asimov.prod.data/PublicPartner/Processed/ACE/StoreReco/PK/Feb/model.json";
#DECLARE androidRnRJson string = string.Format("/shares/asimov.prod.data/PublicPartner/Processed/ACE/Search/RelevanceScore/AndroidRatings/JsonFiles/INT/AndroidRnR_2023_02_03.json", @endDate);

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Output
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
#DECLARE output_AndroidRnRDated string = string.Format("/users/vijeetthomas/inputJson.json", @endDate);

// Read in the json file where each line is a json object
rawJsonRows =
EXTRACT ProductJson : string
FROM @androidRnRJson
USING DefaultTextExtractor();

// Clean up the json
//jsonCleaned =
//SELECT Regex.Replace(ProductJson.Substring(1), @"]$", "") AS ProductJson
//FROM rawJsonRows;

androidRnRInit =
SELECT *
FROM rawJsonRows
WHERE !string.IsNullOrWhiteSpace(ProductJson);
//
//androidRnRInit =
//SELECT *.Except(Summaries),
//       JsonConvert.DeserializeObject<List<Summary>>(Summaries) AS MarketData
//FROM androidRnRInit
//WHERE !string.IsNullOrWhiteSpace(Summaries) AND Summaries != "[]";
//
//androidRnRInit2 =
//    SELECT RatingUtils.GetRatingPerMarket(MarketData, ProductId, Catalog, PartnerProductId) AS RatingsSet
//    FROM androidRnRInit;
//
//androidRnRInit3 =
//    SELECT *.Except(RatingsSet)
//    FROM androidRnRInit2
//    CROSS APPLY RatingsSet.Split('}') AS RatingsPerMarket;
//
//androidRnRInit3 =
//    SELECT (RatingsPerMarket + "}") AS RatingsSet
//    FROM androidRnRInit3;
//
//androidRnROutput =
//    SELECT ScopeJson.Parse<string>(input: RatingsSet, path: "ProductId",silent:true) AS ProductId,
//           ScopeJson.Parse<string>(input: RatingsSet, path: "Market",silent:true) AS Market,
//           ScopeJson.Parse<string>(input: RatingsSet, path: "Catalog",silent:true) AS Catalog,
//           ScopeJson.Parse<string>(input: RatingsSet, path: "PartnerProductId",silent:true) AS PartnerProductId,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "OneStarRatings",silent:true) AS OneStarRatings,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "TwoStarRatings",silent:true) AS TwoStarRatings,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "ThreeStarRatings",silent:true) AS ThreeStarRatings,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "FourStarRatings",silent:true) AS FourStarRatings,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "FiveStarRatings",silent:true) AS FiveStarRatings,
//           ScopeJson.Parse<double>(input: RatingsSet, path: "RatingsAverage",silent:true) AS RatingsAverage,
//           ScopeJson.Parse<long>(input: RatingsSet, path: "RatingsCount",silent:true) AS RatingsCount
//    FROM androidRnRInit3
//    WHERE !string.IsNullOrWhiteSpace(RatingsSet);
//
//androidRnROutput =
//    SELECT *
//    FROM androidRnROutput
//    WHERE !string.IsNullOrWhiteSpace(ProductId);

OUTPUT androidRnRInit
TO @"/users/vijeetthomas/inputJson.json"
USING Outputters.Text
;


#CS

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System;

public static class RatingUtils 
{
    public static string GetRatingPerMarket(List<Summary> summaries, string ProductId, string Catalog, string PartnerProductId) {
        
        List<RatingsOutput> result = new List<RatingsOutput>();
        int i=0;
        int summariesCount = summaries.Count;
        while (i<summariesCount)
        {
            if (summaries[i] != null && summaries[i].markets != null && summaries[i].rating != null && summaries[i].rating.starsCount != null) 
            {
                int j=0;
                int marketsCount = summaries[i].markets.Count;
                while (j<marketsCount) 
                {
                    if (!string.IsNullOrWhiteSpace(summaries[i].markets[j]))
                    {
                        RatingsOutput ratObj = getRatingsObject(summaries,i,j,summariesCount,marketsCount,PartnerProductId,Catalog,ProductId);
                        result.Add(ratObj);
                    }
                    j++;
                }
            }
            ++i;  
        }
        
        return string.Join("", result);
    }

    public static RatingsOutput getRatingsObject (List<Summary> summaries, int i, int j, int summariesCount, int marketsCount, string PartnerProductId, string Catalog, string ProductId) 
    {
        RatingsOutput ratObj = new RatingsOutput();
        ratObj.ProductId = ProductId;
        ratObj.PartnerProductId = PartnerProductId;
        ratObj.Catalog = Catalog;
        ratObj.Market = summaries[i].markets[j];
        ratObj.OneStarRatings = summaries[i].rating.starsCount[0];
        ratObj.TwoStarRatings = summaries[i].rating.starsCount[1];
        ratObj.ThreeStarRatings = summaries[i].rating.starsCount[2];
        ratObj.FourStarRatings = summaries[i].rating.starsCount[3];
        ratObj.FiveStarRatings = summaries[i].rating.starsCount[4];
        ratObj.RatingsAverage = summaries[i].rating.average;
        ratObj.RatingsCount = summaries[i].rating.starsCount[0] + summaries[i].rating.starsCount[1] + summaries[i].rating.starsCount[2] + summaries[i].rating.starsCount[3] + summaries[i].rating.starsCount[4];
        return ratObj;
    }
}
public class Summary 
{
    [JsonProperty("markets")]
    public List<string> markets;
    
    [JsonProperty("rating")]
    public Ratings rating;

}

public class Ratings 
{
    [JsonProperty("starsCount")]
    public List<long> starsCount;
    
    [JsonProperty("average")]
    public double average;

    [JsonProperty("type")]
    public string type;
}

public class RatingsOutput 
{
    [JsonProperty("ProductId")]
    public string ProductId;

    [JsonProperty("Market")]
    public string Market;

    [JsonProperty("PartnerProductId")]
    public string PartnerProductId;

    [JsonProperty("Catalog")]
    public string Catalog;

    [JsonProperty("OneStarRatings")]
    public long OneStarRatings;

    [JsonProperty("TwoStarRatings")]
    public long TwoStarRatings;
    
    [JsonProperty("ThreeStarRatings")]
    public long ThreeStarRatings;
    
    [JsonProperty("FourStarRatings")]
    public long FourStarRatings;
    
    [JsonProperty("FiveStarRatings")]
    public long FiveStarRatings;
    
    [JsonProperty("RatingsAverage")]
    public double RatingsAverage;
    
    [JsonProperty("RatingsCount")]
    public long RatingsCount;

    public override string ToString()  
    {  
        string output = "{\"ProductId\":\""+ProductId+"\", \"Market\":\""+Market
                        +"\", \"PartnerProductId\":\""+PartnerProductId+"\", \"Catalog\":\""+Catalog
                        +"\", \"OneStarRatings\":"+OneStarRatings+", \"TwoStarRatings\":"+TwoStarRatings+", \"ThreeStarRatings\":"+ThreeStarRatings+", \"FourStarRatings\":"+FourStarRatings+", \"FiveStarRatings\":"+FiveStarRatings
                        +", \"RatingsAverage\":"+RatingsAverage+", \"RatingsCount\":"+RatingsCount+"}";
        return output;
    }  
}
#ENDCS